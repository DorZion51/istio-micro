version: "3"
services:
  #公共的组件
  #  golang:
  #    image: golang:1.11-alpine3.9
  #    volumes:
  #      - golang-pprof:/root/pprof
  #    command: ["top"]
  #   networks:
  #   - statis
  #  elasticsearch:
  #    image: elasticsearch:5.6.16-alpine
  ##    image: elasticsearch:6.7.1
  #    container_name: elasticsearch
  #    environment:
  #    - cluster.name=docker-cluster
  #    - bootstrap.memory_lock=true
  #    - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #    ulimits:
  #      memlock:
  #        soft: -1
  #        hard: -1
  #    volumes:
  #    - esdata1:/usr/share/elasticsearch/data
  #    ports:
  #    - 9200:9200
  #    networks:
  #    - statis
#  swagger:
#    image: swaggerapi/swagger-ui
#    ports:
#    - "8887:8080"
#    networks:
#    - statis
#    environment:
#      SWAGGER_JSON: /swagger/srv/statis/proto/rbac.swagger.json
#    #      BASE_URL: /swagger
#    volumes:
#    - ./config/swagger/:/swagger
  redis:
    image: redis:5.0.3-alpine3.8
    restart: always
    volumes:
    - redis-data-user-istio:/var/lib/redis
    ports:
    - "6379:6379"
  mysqldb:
    image: 'mysql/mysql-server:5.7'
    restart: always
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: user
      MYSQL_USER: test
      MYSQL_PASSWORD: test
    volumes:
    - mysql-data-user-istio:/var/lib/mysql
    - ./config/mysql/my.cnf:/etc/my.cnf
    - ./config/mysql/:/docker-entrypoint-initdb.d/
    ports:
    - '3307:3306'
  postgresdb:
    image: 'postgres:11.4-alpine'
    restart: always
    environment:
      POSTGRES_PASSWORD: meng
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
    - postgres-data-account-istio:/var/lib/postgresql/data/pgdata
    - ./config/postgres/pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
    - ./config/postgres/postgresql.conf:/var/lib/postgresql/data/postgresql.conf
    - ./config/postgres/:/docker-entrypoint-initdb.d/
    ports:
    - '5432:5432'
  zookeeper:
    image: wurstmeister/zookeeper
    restart: always
    ports:
    - "2181:2181"
  kafka:
    image: wurstmeister/kafka
    restart: always
    ports:
    - "9092:9092"
    depends_on:
    - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 192.168.2.103
      KAFKA_CREATE_TOPICS: "test:1:2"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
  jaeger:
    image: jaegertracing/all-in-one:1.7
    restart: always
    ports:
    - "5775:5775/udp"
    - "6831:6831/udp"
    - "6832:6832/udp"
    - "5778:5778"
    - "16686:16686"
    - "14268:14268"
    - "9411:9411"
  #  consul:
  #    command: -server -bootstrap -rejoin
  #    image: consul:latest
  #    ports:
  #      - "8300:8300"
  #      - "8400:8400"
  #      - "8500:8500"
  #      - "8600:53/udp"


  influxdb:
    image: influxdb:1.5-alpine
#    command:
#      - /init-influxdb.sh
    environment:
      INFLUXDB_DB: test01
#      INFLUXDB_ADMIN_ENABLED: !!bool true
#      INFLUXDB_ADMIN_USER: test
#      INFLUXDB_USER_PASSWORD: test
#    volumes:
#    - influxdb-local:/var/lib/influxdb
    ports:
    - "8086:8086"
  grafana:
    image: grafana/grafana:latest
    ports:
    - "3000:3000"
  # 数据订阅
#  canal_server:
#    image: canal/canal-server:v1.1.1
#    restart: always
#    depends_on:
#    - mysqldb
#    environment:
#      #      canal.auto.scan: !!bool false
#      canal.destinations: test
#      #本地测试环境
#      canal.instance.master.address: mysqldb:3306 #本地测试环境
#      canal.instance.dbUsername: test
#      canal.instance.dbPassword: test
#      canal.instance.connectionCharset: UTF-8
#    #      canal.instance.tsdb.enable: !!bool false
#    #      canal.instance.gtidon: !!bool false
#    #      canal.instance.master.journal.name: mysql-bin.000881
#    #      canal.instance.master.position: 4
#    ports:
#    - "8000:8000"
#    - "2222:2222"
#    - "11111:11111"
#    - "11112:11112"

  #项目
  srv_user:
    build: ./bin/srv_user
    restart: always
    depends_on:
    - redis
    - mysqldb
    - kafka
    - jaeger
    - influxdb
    environment:
      CONFIGOR_TRACE_ADDRESS: http://jaeger:14268/api/traces?format=jaeger.thrift
      CONFIGOR_MYSQL_ADDR: mysqldb
      CONFIGOR_MYSQL_PORT: 3306
      CONFIGOR_MYSQL_DBNAME: user
      CONFIGOR_MYSQL_USER: test
      CONFIGOR_MYSQL_PASSWORD: test
      CONFIGOR_REDIS_ADDR: redis:6379
      CONFIGOR_REDIS_PASSWORD:
      CONFIGOR_KAFKA_ADDRS: kafka:9092
      CONFIGOR_LOG_PATH: /tmp/srv/test
    ports:
    - "5001:5001"
    - "9998:9999"

  #项目
  srv_account:
    build: ./bin/srv_account
    restart: always
    depends_on:
    - postgresdb
    - jaeger
    - influxdb
    environment:
      CONFIGOR_TRACE_ADDRESS: http://jaeger:14268/api/traces?format=jaeger.thrift
      CONFIGOR_POSTGRES_ADDR: postgresdb
      CONFIGOR_POSTGRES_PORT: 5432
      CONFIGOR_POSTGRES_DBNAME: test
      CONFIGOR_POSTGRES_USER: postgres
      CONFIGOR_POSTGRES_PASSWORD: meng
      CONFIGOR_KAFKA_ADDRS: kafka:9092
    ports:
    - "5003:5003"
    - "9997:9997"

  srv_socket:
    build: ./bin/srv_socket
    restart: always
    depends_on:
    - kafka
    - jaeger
    environment:
      CONFIGOR_TRACE_ADDRESS: http://jaeger:14268/api/traces?format=jaeger.thrift
#      CONFIGOR_TRACE_ADDRESS: jaeger:6831
#      http://jaeger:14268/api/traces?format=jaeger.thrift
      CONFIGOR_KAFKA_ADDRS: kafka:9092
    ports:
    - "5002:5002"
  api_backend:
    build: ./bin/api_backend
    restart: always
    depends_on:
    - jaeger
    - srv_user
    - influxdb
    - grafana
    environment:
      CONFIGOR_TRACE_ADDRESS: http://jaeger:14268/api/traces?format=jaeger.thrift
      CONFIGOR_SRVUSER_ADDRESS: srv_user:5001
    ports:
    - "8888:8888"
  api_frontend:
    build: ./bin/api_frontend
    restart: always
    depends_on:
    - jaeger
    - srv_user
    environment:
      CONFIGOR_TRACE_ADDRESS: http://jaeger:14268/api/traces?format=jaeger.thrift
      CONFIGOR_SRVUSER_ADDRESS: srv_user:5001
    ports:
    - "8889:8889"

volumes:
  mysql-data-user-istio:
  redis-data-user-istio:
  postgres-data-account-istio:
  influxdb-local: