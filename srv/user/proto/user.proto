syntax = "proto3";

package user;
//  参考:https://github.com/chai2010/advanced-go-programming-book/blob/master/ch4-rpc/ch4-06-grpc-ext.md//  参考:https://github.com/grpc-ecosystem/grpc-gateway/tree/master/examples/proto/examplepb

import "google/api/annotations.proto";// import "google/protobuf/empty.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "用户";
        version: "1.0";
        contact: {
            name: "xiaomeng79";
            url: "https://github.com/xiaomeng79";
            email: "mengmeng79@yeah.net";
        };
    };
    host: "127.0.0.1:9999";
   //     base_path: "/backend/v1";
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    security_definitions: {
        security: {
            key: "ApiKeyAuth";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "X-API-Key";
            }
        }
    }
    security: {
        security_requirement: {
            key: "ApiKeyAuth";
            value: {};
        }
    }
    responses: {
        key: "403";
        value: {
            description: "没权限";
        }
    }
};


//  用户服务
service UserService {
   //  用户添加
    rpc UserAdd(UserBase) returns (UserBase) {
        option (google.api.http) = {
			post: "/user"
			body:"*"
		};
    }
   //  用户更新
    rpc UserUpdate(UserBase) returns (UserBase) {
        option (google.api.http) = {
			put: "/user"
			body:"*"
		};
    }
   //  用户删除
    rpc UserDelete(UserID) returns (UserID) {
        option (google.api.http) = {
			delete: "/user/{id}"
		};
    }
   //  用户查询一个
    rpc UserQueryOne(UserID) returns (UserBase) {
        option (google.api.http) = {
			get: "/user/{id}"
			response_body:"*"
		};
    }
   //  用户查询全部
    rpc UserQueryAll(UserAllOption) returns (UserAll) {
        option (google.api.http) = {
			get: "/user"
			response_body:"*"
		};
    }
}
//  用户性别
enum UserSex {
    DEFAULT = 0;
    MEN = 1;
    WOMEN = 2;
}
//  注入标签: https://github.com/favadi/protoc-go-inject-tag
//  用户基本信息
message UserBase {
   //  @inject_tag: db:"id"
    int64 id = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title:"用户id"}];
   //  @inject_tag: db:"user_name" valid:"required~用户名称必须存在"
    string user_name = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title:"用户名称"}];
   //  @inject_tag: db:"iphone" valid:"required~手机号必须存在"
    string iphone = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title:"手机号"}];
   //  @inject_tag: db:"password"
    string password = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title:"密码"}];
   //  @inject_tag: db:"sex"
    UserSex sex = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title:"性别"}];
}//  用户ID
message UserID {
   //  用户id
    int64 id = 1;
}
//  用户全部选项
message UserAllOption {
   //  用户性别
    UserSex sex = 1;
   //  页数
    Page page = 2;
   //  用户名称
    string user_name = 3;
}
//  用户全部
message UserAll {
   //  用户信息
    repeated UserBase all = 1;
   //  页数
    Page page = 2;
}
//  空消息
message Null {}
//  分页
message Page {
   //  页
    int64 page_index = 1;
   //  每页大小
    int64 page_size = 2;
   //  总页数
    int64 page_total = 3;
   //  条数
    int64 count = 4;
   //  总条数
    int64 total = 5;
}